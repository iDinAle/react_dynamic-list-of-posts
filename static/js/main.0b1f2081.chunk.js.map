{"version":3,"sources":["api/fetch.js","components/User.js","components/Comment.js","components/CommentList.js","components/Post.js","components/PostList.js","App.js","index.js"],"names":["getData","URL","response","regenerator_default","a","async","_context","prev","next","awrap","fetch","sent","abrupt","json","stop","User","_ref","name","email","address","react_default","createElement","className","concat","city","Comment","body","defaultProps","CommentList","list","map","item","components_Comment","Object","assign","key","id","Post","highlightedText","title","user","comments","highlightText","text","split","RegExp","part","i","react","toLowerCase","components_User","components_CommentList","PostList","highlightedSearchResult","components_Post","App","_useState","useState","_useState2","slicedToArray","combinedData","setCombinedData","_useState3","_useState4","isLoaded","setLoaded","_useState5","_useState6","isLoading","setLoading","_useState7","_useState8","isError","setError","_useState9","_useState10","inputValue","setInputValue","visiblePosts","filter","_ref2","includes","Fragment","type","placeholder","onChange","target","value","replace","slice","components_PostList","onClick","postsData","usersData","commentsData","allData","post","objectSpread2","find","userId","comment","postId","t0","disabled","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.0b1f2081.chunk.js","sourcesContent":["export const getData = async(URL) => {\n  const response = await fetch(URL);\n\n  return response.json();\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst User = ({ name, email, address }) => (\n  <div className=\"user post__user\">\n    <h3 className=\"user__name\">{`Author: ${name}`}</h3>\n    <p className=\"user__email\">{`email: ${email}`}</p>\n    <p className=\"user__city\">{`city: ${address.city}`}</p>\n  </div>\n);\n\nUser.propTypes = {\n  name: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n  address: PropTypes.shape({\n    city: PropTypes.string,\n  }).isRequired,\n};\n\nexport default User;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Comment = ({ name, email, body }) => (\n  <div className=\"comment\">\n    <h3 className=\"comment__title\">{`Comment: ${name}`}</h3>\n    <p className=\"comment__content\">{body}</p>\n    <p className=\"comment__user-email\">{email}</p>\n  </div>\n);\n\nComment.propTypes = {\n  name: PropTypes.string,\n  email: PropTypes.string,\n  body: PropTypes.string,\n};\n\nComment.defaultProps = {\n  name: 'Without title',\n  email: null,\n  body: 'Hidden comment',\n};\n\nexport default Comment;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Comment from './Comment';\n\nconst CommentList = ({ list }) => (\n  <div className=\"post__comments-container\">\n    {list.map(\n      item => <Comment key={item.id} {...item} />\n    )}\n  </div>\n);\n\nCommentList.propTypes = {\n  list: PropTypes.arrayOf(\n    PropTypes.object\n  ),\n};\n\nCommentList.defaultProps = { list: 'No comments' };\n\nexport default CommentList;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport User from './User';\nimport CommentList from './CommentList';\n\nconst Post = ({ highlightedText, id, title, body, user, comments }) => {\n  const highlightText = (text) => {\n    if (!highlightedText) {\n      return text;\n    }\n\n    const parts = text.split(new RegExp(`(${highlightedText})`, 'gi'));\n\n    return parts.map((part, i) => (\n      <Fragment key={`${part + i}`}>\n        {part.toLowerCase() === highlightedText.toLowerCase()\n          ? <span className=\"highlighted-text\">{part}</span>\n          : part}\n      </Fragment>\n    ));\n  };\n\n  return (\n    <article className=\"post\">\n      <div className=\"post__container\">\n        <article className=\"post__information\">\n          <p className=\"post__number\">{`Post ${id}:`}</p>\n\n          <h2 className=\"post__title\">\n            {highlightText(title)}\n          </h2>\n\n          <p className=\"post__content\">\n            {highlightText(body)}\n          </p>\n        </article>\n\n        <User {...user} />\n      </div>\n\n      <CommentList list={comments} />\n    </article>\n  );\n};\n\nPost.propTypes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  body: PropTypes.string.isRequired,\n  user: PropTypes.shape({\n    name: PropTypes.string,\n    email: PropTypes.string,\n    address: PropTypes.object,\n  }).isRequired,\n  comments: PropTypes.arrayOf(\n    PropTypes.object\n  ).isRequired,\n  highlightedText: PropTypes.string.isRequired,\n};\n\nexport default Post;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Post from './Post';\n\nconst PostList = ({ list, highlightedSearchResult }) => (\n  <div className=\"posts-container\">\n    {list.map(\n      item => (\n        <Post\n          highlightedText={highlightedSearchResult}\n          key={item.id}\n          {...item}\n        />\n      )\n    )}\n  </div>\n);\n\nPostList.propTypes = {\n  list: PropTypes.arrayOf(PropTypes.object).isRequired,\n  highlightedSearchResult: PropTypes.string.isRequired,\n};\n\nexport default PostList;\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { getData } from './api/fetch';\nimport PostList from './components/PostList';\n\nconst POSTS_URL = 'https://jsonplaceholder.typicode.com/posts';\nconst USERS_URL = 'https://jsonplaceholder.typicode.com/users';\nconst COMMENTS_URL = 'https://jsonplaceholder.typicode.com/comments';\n\nconst App = () => {\n  const [combinedData, setCombinedData] = useState([]);\n  const [isLoaded, setLoaded] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n  const [isError, setError] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n\n  const loadData = async() => {\n    setLoading(true);\n\n    try {\n      const postsData = await getData(POSTS_URL);\n      const usersData = await getData(USERS_URL);\n      const commentsData = await getData(COMMENTS_URL);\n\n      const allData = postsData.map(\n        post => ({\n          ...post,\n          user: usersData.find(\n            user => post.userId === user.id\n          ),\n          comments: commentsData.filter(\n            comment => post.id === comment.postId\n          ),\n        })\n      );\n\n      setCombinedData(allData);\n      setLoading(false);\n      setLoaded(true);\n    } catch (e) {\n      setLoading(false);\n      setError(true);\n    }\n  };\n\n  const searchPosts = ({ target }) => {\n    setInputValue(\n      target.value.replace(/^\\s+/, '').slice(0, 37)\n    );\n  };\n\n  const visiblePosts = combinedData\n    .filter(({ title, body }) => (title + body)\n      .toLowerCase()\n      .includes(inputValue.toLowerCase()));\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"main-title\">Dynamic list of posts</h1>\n\n      {isLoaded ? (\n        <>\n          <input\n            type=\"search\"\n            className=\"posts-search\"\n            placeholder=\"Search for posts\"\n            onChange={searchPosts}\n            value={inputValue}\n          />\n\n          <PostList\n            list={visiblePosts}\n            highlightedSearchResult={inputValue}\n          />\n        </>\n      ) : (\n        <>\n          {isError ? (\n            <h2 className=\"sub-title\">Error occured!!!</h2>\n          ) : (\n            <h2 className=\"sub-title\">No PostsList yet!</h2>\n          )}\n\n          <button\n            className=\"load-btn\"\n            type=\"button\"\n            onClick={loadData}\n            disabled={isLoading}\n          >\n            {isLoading ? 'Loading...' : 'Load TodoList'}\n          </button>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}